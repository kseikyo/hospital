{"ast":null,"code":"var _jsxFileName = \"/home/kseikyo/Dev/graphql-react-event-booking/frontend/src/pages/Events.js\";\nimport React, { Component } from 'react';\nimport './Events.css';\nimport Modal from '../components/Modal/Modal';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport AuthContext from '../context/auth-context';\n\nclass EventsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      creating: false\n    };\n\n    this.startCreateEventHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.modalConfirmHandler = () => {\n      this.setState({\n        creating: false\n      });\n      const title = this.titleElRef.current.value;\n      const price = parseFloat(this.priceElRef.current.value);\n      const date = this.dateElRef.current.value;\n      const description = this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price <= 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      }\n\n      const event = {\n        title,\n        price,\n        date,\n        description\n      };\n      console.log(event);\n      const requestBody = {\n        query: \"\\n                mutation {\\n                    createEvent(eventInput: {title: \\\"\".concat(title, \"\\\", description: \\\"\").concat(description, \"\\\", price: \").concat(price, \", date: \\\"\").concat(date, \"\\\"}) {\\n                        _id\\n                        title\\n                        description\\n                        date\\n                        price\\n                        creator {\\n                            _id\\n                            email\\n                        }\\n                    }\\n                }\\n            \")\n      };\n      const token = this.context.token;\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Authentication failed');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(resData);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false\n      });\n    };\n\n    this.titleElRef = React.createRef();\n    this.priceElRef = React.createRef();\n    this.dateElRef = React.createRef();\n    this.descriptionElRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  fetchEvents() {\n    const requestBody = {\n      query: \"\\n                query {\\n                    events {\\n                        _id\\n                        title\\n                        description\\n                        date\\n                        price\\n                        creator {\\n                            _id\\n                            email\\n                        }\\n                    }\\n                }\\n            \"\n    };\n    const token = this.context.token;\n    fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Authentication failed');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(resData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.state.creating && React.createElement(Backdrop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), this.state.creating && React.createElement(Modal, {\n      title: \"Add Event\",\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      ref: this.titleElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Medico\"), React.createElement(\"input\", {\n      type: \"number\",\n      id: \"price\",\n      ref: this.priceElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"input\", {\n      type: \"datetime-local\",\n      id: \"date\",\n      ref: this.dateElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"textarea\", {\n      id: \"description\",\n      rows: \"4\",\n      ref: this.descriptionElRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })))), this.context.token && React.createElement(\"div\", {\n      className: \"events-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Share your own events!\"), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.startCreateEventHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Create event\")), React.createElement(\"ul\", {\n      className: \"events__list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"events__list-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"asd\")));\n  }\n\n}\n\nEventsPage.contextType = AuthContext;\nexport default EventsPage;","map":{"version":3,"sources":["/home/kseikyo/Dev/graphql-react-event-booking/frontend/src/pages/Events.js"],"names":["React","Component","Modal","Backdrop","AuthContext","EventsPage","constructor","props","state","creating","startCreateEventHandler","setState","modalConfirmHandler","title","titleElRef","current","value","price","parseFloat","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","event","console","log","requestBody","query","token","context","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","catch","err","modalCancelHandler","createRef","componentDidMount","fetchEvents","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './Events.css';\r\nimport Modal from '../components/Modal/Modal';\r\nimport Backdrop from '../components/Backdrop/Backdrop';\r\nimport AuthContext from '../context/auth-context';\r\n\r\nclass EventsPage extends Component {\r\n    state = {\r\n        creating: false\r\n    };\r\n\r\n    constructor(props) { \r\n        super(props);\r\n        this.titleElRef = React.createRef();\r\n        this.priceElRef = React.createRef();\r\n        this.dateElRef = React.createRef();\r\n        this.descriptionElRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchEvents();\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    startCreateEventHandler = () => {\r\n        this.setState({creating: true});\r\n    };\r\n\r\n    modalConfirmHandler = () => {\r\n        this.setState({creating: false});\r\n        const title = this.titleElRef.current.value;\r\n        const price = parseFloat(this.priceElRef.current.value);\r\n        const date = this.dateElRef.current.value;\r\n        const description = this.descriptionElRef.current.value;\r\n\r\n        if (\r\n            title.trim().length === 0 || \r\n            price <= 0 || \r\n            date.trim().length === 0 || \r\n            description.trim().length === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const event = {title, price, date, description};\r\n\r\n        console.log(event);\r\n\r\n        \r\n        const requestBody = {\r\n            query: `\r\n                mutation {\r\n                    createEvent(eventInput: {title: \"${title}\", description: \"${description}\", price: ${price}, date: \"${date}\"}) {\r\n                        _id\r\n                        title\r\n                        description\r\n                        date\r\n                        price\r\n                        creator {\r\n                            _id\r\n                            email\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n            };\r\n        \r\n        const token = this.context.token;\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if(res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Authentication failed');\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            console.log(resData);\r\n        })\r\n        .catch(err =>{\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    modalCancelHandler = () => {\r\n        this.setState({creating: false});\r\n    };\r\n\r\n    fetchEvents() {\r\n       \r\n        const requestBody = {\r\n            query: `\r\n                query {\r\n                    events {\r\n                        _id\r\n                        title\r\n                        description\r\n                        date\r\n                        price\r\n                        creator {\r\n                            _id\r\n                            email\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n            };\r\n        \r\n        const token = this.context.token;\r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ token\r\n            }\r\n        })\r\n        .then(res => {\r\n            if(res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Authentication failed');\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            console.log(resData);\r\n        })\r\n        .catch(err =>{\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.creating && <Backdrop/>}\r\n                {this.state.creating && \r\n                <Modal \r\n                    title='Add Event' \r\n                    canCancel canConfirm \r\n                    onCancel={this.modalCancelHandler}\r\n                    onConfirm={this.modalConfirmHandler}\r\n                >\r\n                    <form>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"title\">Title</label>\r\n                            <input type=\"text\" id=\"title\" ref={this.titleElRef}></input>\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"price\">Medico</label>\r\n                            <input type=\"number\" id=\"price\" ref={this.priceElRef}></input>\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"date\">Date</label>\r\n                            <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef}></input>\r\n                        </div>\r\n                        <div className=\"form-control\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <textarea  id=\"description\" rows=\"4\" ref={this.descriptionElRef}></textarea>\r\n                        </div>\r\n                    </form>\r\n                </Modal>}\r\n                {this.context.token && <div className=\"events-control\">\r\n                    <p>Share your own events!</p>\r\n                    <button className=\"btn\" onClick={this.startCreateEventHandler}>Create event</button>\r\n                </div>}\r\n                <ul className=\"events__list\">\r\n                    <li className=\"events__list-item\">asd</li>\r\n                </ul>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventsPage;"]},"metadata":{},"sourceType":"module"}