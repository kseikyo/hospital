{"ast":null,"code":"var _jsxFileName = \"/home/kseikyo/Dev/graphql-react-event-booking/frontend/src/pages/Auth.js\";\nimport React, { Component } from 'react';\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\n\nclass AuthPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogin: true,\n      isMedico: false\n    };\n\n    this.switchModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isLogin: !prevState.isLogin\n        };\n      });\n    };\n\n    this.switchMedHandler = () => {\n      this.setState(prevState => {\n        return {\n          isMedico: !prevState.isMedico\n        };\n      });\n    };\n\n    this.submitHandler = consulta => {\n      consulta.preventDefault();\n      console.log(consulta);\n      console.log(this.emailEl);\n      console.log(this.nomeEl);\n      console.log(this.passwordEl);\n      let nome;\n      const email = this.emailEl.current.value;\n\n      if (!this.state.isLogin) {\n        nome = this.nomeEl.current.value;\n      }\n\n      const password = this.passwordEl.current.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0) {\n        return;\n      }\n\n      let requestBody = {\n        query: \"\\n                query {\\n                    login(email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\"){\\n                        clienteId\\n                        token\\n                        tokenExpiration\\n                    }\\n                }\\n            \")\n      };\n\n      if (!this.state.isLogin) {\n        requestBody = {\n          query: \"\\n                mutation {\\n                    createCliente(clienteInput: {email: \\\"\".concat(email, \"\\\", nome:\\\"\").concat(nome, \"\\\" password: \\\"\").concat(password, \"\\\"}) {\\n                        _id\\n                        email\\n                    }\\n                }\\n            \")\n        };\n      }\n\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Authentication failed');\n        }\n\n        return res.json();\n      }).then(resData => {\n        if (resData.data.login.token) {\n          this.context.login(resData.data.login.token, resData.data.login.clienteId, resData.data.login.tokenExpiration);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.emailEl = React.createRef();\n    this.nomeEl = React.createRef();\n    this.passwordEl = React.createRef();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"auth-form\",\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"E-mail\"), React.createElement(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      ref: this.emailEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), !this.state.isLogin && React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"Nome\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Nome\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"nome\",\n      ref: this.nomeEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      ref: this.passwordEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.switchModeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Go to\", this.state.isLogin ? ' Signup' : ' Login'), this.state.isLogin && React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.switchMedHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Go to\", this.state.isMedico ? ' Medico' : ' Cliente')));\n  }\n\n}\n\nAuthPage.contextType = AuthContext;\nexport default AuthPage;","map":{"version":3,"sources":["/home/kseikyo/Dev/graphql-react-event-booking/frontend/src/pages/Auth.js"],"names":["React","Component","AuthContext","AuthPage","constructor","props","state","isLogin","isMedico","switchModeHandler","setState","prevState","switchMedHandler","submitHandler","consulta","preventDefault","console","log","emailEl","nomeEl","passwordEl","nome","email","current","value","password","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","data","login","token","context","clienteId","tokenExpiration","catch","err","createRef","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './Auth.css';\r\nimport AuthContext from '../context/auth-context';\r\nclass AuthPage extends Component {\r\n    state = {\r\n        isLogin: true,\r\n        isMedico: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.emailEl = React.createRef();\r\n        this.nomeEl = React.createRef();\r\n        this.passwordEl = React.createRef();\r\n    }\r\n\r\n    switchModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isLogin: !prevState.isLogin};\r\n        });\r\n    }\r\n\r\n    switchMedHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isMedico: !prevState.isMedico};\r\n        });\r\n    }\r\n\r\n    submitHandler = (consulta) => {\r\n        consulta.preventDefault();\r\n        console.log(consulta);\r\n        console.log(this.emailEl);\r\n        console.log(this.nomeEl);\r\n        console.log(this.passwordEl);\r\n        \r\n        let nome;\r\n        const email = this.emailEl.current.value;\r\n        if(!this.state.isLogin) { \r\n            nome  = this.nomeEl.current.value;\r\n        }\r\n        const password = this.passwordEl.current.value;\r\n\r\n        if (email.trim().length === 0 || password.trim().length === 0) {\r\n            return;\r\n        }\r\n        let requestBody = {\r\n            query: `\r\n                query {\r\n                    login(email: \"${email}\", password: \"${password}\"){\r\n                        clienteId\r\n                        token\r\n                        tokenExpiration\r\n                    }\r\n                }\r\n            `\r\n        };\r\n\r\n        if (!this.state.isLogin){\r\n            requestBody = {\r\n            query: `\r\n                mutation {\r\n                    createCliente(clienteInput: {email: \"${email}\", nome:\"${nome}\" password: \"${password}\"}) {\r\n                        _id\r\n                        email\r\n                    }\r\n                }\r\n            `\r\n            };\r\n        }\r\n        \r\n\r\n        fetch('http://localhost:8000/graphql', {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            if(res.status !== 200 && res.status !== 201) {\r\n                throw new Error('Authentication failed');\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(resData => {\r\n            if(resData.data.login.token) {\r\n                this.context.login(\r\n                    resData.data.login.token, resData.data.login.clienteId, resData.data.login.tokenExpiration\r\n                );\r\n\r\n            }\r\n        })\r\n        .catch(err =>{\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <form className=\"auth-form\" onSubmit={this.submitHandler}>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"email\">E-mail</label>\r\n                <input type=\"email\" id=\"email\" ref={this.emailEl}></input>\r\n            </div>\r\n            {!this.state.isLogin && \r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"Nome\">Nome</label>\r\n                <input type=\"text\" id=\"nome\" ref={this.nomeEl}></input>\r\n            </div>} \r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" ref={this.passwordEl}></input>\r\n            </div>\r\n            \r\n            <div className=\"form-actions\">\r\n                <button type=\"submit\">Submit</button>\r\n                <button type=\"button\" onClick={this.switchModeHandler}>Go to\r\n                 {this.state.isLogin ? ' Signup': ' Login'}</button>\r\n                 {this.state.isLogin && <button type=\"button\" onClick={this.switchMedHandler}>Go to\r\n                 {this.state.isMedico ? ' Medico': ' Cliente'}</button>}\r\n            </div>\r\n            \r\n        </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthPage;"]},"metadata":{},"sourceType":"module"}